// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: read.sql

package db

import (
	"context"
)

const findCostTypeAll = `-- name: FindCostTypeAll :many
SELECT id, type_name, created_at, updated_at
FROM cost_types
ORDER BY created_at
`

func (q *Queries) FindCostTypeAll(ctx context.Context) ([]CostType, error) {
	rows, err := q.db.QueryContext(ctx, findCostTypeAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CostType
	for rows.Next() {
		var i CostType
		if err := rows.Scan(
			&i.ID,
			&i.TypeName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCostTypeByTypeName = `-- name: FindCostTypeByTypeName :one
SELECT id, type_name, created_at, updated_at
FROM cost_types
WHERE type_name = ?
`

func (q *Queries) FindCostTypeByTypeName(ctx context.Context, typeName string) (CostType, error) {
	row := q.db.QueryRowContext(ctx, findCostTypeByTypeName, typeName)
	var i CostType
	err := row.Scan(
		&i.ID,
		&i.TypeName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
