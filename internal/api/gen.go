//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// Cost コスト
type Cost struct {
	// CostTypeId コスト種別ID
	CostTypeId int64 `json:"costTypeId"`

	// CostTypeName コスト種別名
	CostTypeName string `json:"costTypeName"`

	// Month コスト発生月
	Month int32 `json:"month"`

	// Year コスト発生年
	Year int32 `json:"year"`

	// Yen コスト（円）
	Yen int32 `json:"yen"`
}

// CostType コスト種別
type CostType struct {
	// CostTypeId コスト種別ID
	CostTypeId int64 `json:"costTypeId"`

	// CostTypeName コスト種別名
	CostTypeName string `json:"costTypeName"`
}

// ErrorObject エラー情報
type ErrorObject struct {
	// Message エラーメッセージ
	Message string `json:"message"`
}

// GetCostsTypesResponse コスト情報取得のレスポンス
type GetCostsTypesResponse struct {
	// CostTypes コスト種別
	CostTypes *[]CostType `json:"costTypes,omitempty"`
}

// GetMonthlyCostsResponse 月次コスト取得のレスポンス
type GetMonthlyCostsResponse struct {
	// Costs コスト情報
	Costs []Cost `json:"costs"`
}

// PostMonthlyCostsResponse 月次コスト登録のレスポンス
type PostMonthlyCostsResponse struct {
	// CostTypeId コスト種別ID
	CostTypeId int64 `json:"costTypeId"`

	// Count 登録件数
	Count int32 `json:"count"`
}

// GetApiV1CostsMonthlyParams defines parameters for GetApiV1CostsMonthly.
type GetApiV1CostsMonthlyParams struct {
	// CostTypeId コスト種別ID
	CostTypeId int64 `form:"costTypeId" json:"costTypeId"`

	// BeginYear 期間開始年
	BeginYear *int32 `form:"beginYear,omitempty" json:"beginYear,omitempty"`

	// BeginMonth 期間開始月
	BeginMonth *int32 `form:"beginMonth,omitempty" json:"beginMonth,omitempty"`

	// EndYear 期間終了年
	EndYear *int32 `form:"endYear,omitempty" json:"endYear,omitempty"`

	// EndMonth 期間終了月
	EndMonth *int32 `form:"endMonth,omitempty" json:"endMonth,omitempty"`
}

// PostApiV1CostsMonthlyJSONBody defines parameters for PostApiV1CostsMonthly.
type PostApiV1CostsMonthlyJSONBody struct {
	// CostTypeName コスト種別名
	CostTypeName string `json:"costTypeName"`

	// Costs コスト情報
	Costs []struct {
		// Month コスト発生月
		Month *int32 `json:"month,omitempty"`

		// Year コスト発生年
		Year *int32 `json:"year,omitempty"`

		// Yen コスト(円)
		Yen *int32 `json:"yen,omitempty"`
	} `json:"costs"`
}

// PostApiV1CostsMonthlyJSONRequestBody defines body for PostApiV1CostsMonthly for application/json ContentType.
type PostApiV1CostsMonthlyJSONRequestBody PostApiV1CostsMonthlyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 月次コストの取得
	// (GET /api/v1/costs/monthly)
	GetApiV1CostsMonthly(w http.ResponseWriter, r *http.Request, params GetApiV1CostsMonthlyParams)
	// 月次コストの登録
	// (POST /api/v1/costs/monthly)
	PostApiV1CostsMonthly(w http.ResponseWriter, r *http.Request)
	// コスト種別の取得
	// (GET /api/v1/costs/types)
	GetApiV1CostsTypes(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1CostsMonthly operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1CostsMonthly(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1CostsMonthlyParams

	// ------------- Required query parameter "costTypeId" -------------

	if paramValue := r.URL.Query().Get("costTypeId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "costTypeId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "costTypeId", r.URL.Query(), &params.CostTypeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "costTypeId", Err: err})
		return
	}

	// ------------- Optional query parameter "beginYear" -------------

	err = runtime.BindQueryParameter("form", true, false, "beginYear", r.URL.Query(), &params.BeginYear)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "beginYear", Err: err})
		return
	}

	// ------------- Optional query parameter "beginMonth" -------------

	err = runtime.BindQueryParameter("form", true, false, "beginMonth", r.URL.Query(), &params.BeginMonth)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "beginMonth", Err: err})
		return
	}

	// ------------- Optional query parameter "endYear" -------------

	err = runtime.BindQueryParameter("form", true, false, "endYear", r.URL.Query(), &params.EndYear)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endYear", Err: err})
		return
	}

	// ------------- Optional query parameter "endMonth" -------------

	err = runtime.BindQueryParameter("form", true, false, "endMonth", r.URL.Query(), &params.EndMonth)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endMonth", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1CostsMonthly(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1CostsMonthly operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1CostsMonthly(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1CostsMonthly(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1CostsTypes operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1CostsTypes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1CostsTypes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/v1/costs/monthly", wrapper.GetApiV1CostsMonthly)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/costs/monthly", wrapper.PostApiV1CostsMonthly)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/costs/types", wrapper.GetApiV1CostsTypes)

	return m
}
